{"version":3,"sources":["robots.js","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["robots","id","name","username","email","Card","className","alt","src","CardList","cardComponent","map","user","i","key","style","display","flexWrap","justifyContent","inputStyle","padding","borderRadius","marginBottom","backgroundColor","color","outline","search","searchField","searchChange","type","placeholder","onChange","Scroll","props","overflowY","height","children","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","margin","SearchBox","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","textAlign","fontFamily","fontSize","background","webkitBackgroundClip","webkitTextFillColor","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f46f2a5.chunk.js","sourcesContent":["export const robots = [{\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  },\r\n  {\r\n    id: 11,\r\n    name: 'king123',\r\n    username: 'kingston123mail.com',\r\n    email: 'kingsto...123mail.com'\r\n  }\r\n];","import React from 'react';\r\nimport './Card.css'\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`} />\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) =>{\r\n   \r\n    const cardComponent = robots.map((user, i) => {\r\n        return <Card key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email}\r\n                />\r\n    });\r\n\r\n    const mystyle = {\r\n        display:'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center'\r\n    };\r\n    return(\r\n        <div style={mystyle}>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst inputStyle = {\r\n    padding:'8px',\r\n    borderRadius: '5px',\r\n    marginBottom: '20px',\r\n    backgroundColor: '#8f32a8',\r\n    color:'#fff',\r\n    outline:'none'\r\n}\r\n\r\nconst search = ({searchField, searchChange}) => {\r\n    return(\r\n        <div>\r\n            <input style={inputStyle} type='search' placeholder='Search . . ' \r\n            onChange={searchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default search;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:'scroll', height:'70vh'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport {robots} from './robots';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll'\r\n\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchField : ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value})\r\n    }\r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n        })\r\n        return (\r\n            <div style={{ margin:'0 auto' }}>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div style = {{textAlign:'center'}} >\n      <h1 style={{fontFamily:'Roshi', fontSize:'4em', \n      background: '-webkit-linear-gradient(#ff4800, #1c9abe)',webkitBackgroundClip:'text',\n      webkitTextFillColor: 'transparent'}}>Robo Friends</h1>\n      \n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}